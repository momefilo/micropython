; Ein WS2812B Programm welches auf Timings von
; https://cpldcpu.com/2014/01/14/light_ws2812-library-v2-0-part-i-understanding-the-ws2812/
; aufbaut. Die Bitperiodendauer betraegt 1250ns
; Die Uebertragung eines Bit ist in 10 Zeiteinheiten eingeteilt
; Eine Null entspricht 1/5 und eine Eins 1/2 der Periodendauer eines Bits
; in dem die Datenleitung High fuehrt. Um die zu den LEDs gesendeten
; Datenbits in deren Speicher zu schreiben ist hier ein mit
; "PUBLIC set_bits:" bezeichneter Einsprungpunk definiert der die
; 48 fache Bitperiodendauer die Datenleitung auf Low setzt
; um anschliesend wieder mit der Bitverarbeitung zu beginnen

.program asm
.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

PUBLIC set_bits:
	set x, 28       side 0  [15]    ; pull bus low 16 Ticks
loop_a:
	jmp x-- loop_a  side 0  [15]    ; pull bus low 29 x 16 Ticks

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T2 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void asm_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = asm_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);// 24 Bit nach links ausshiften
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = asm_T1 + asm_T2 + asm_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint asm_set_bits (uint offset) {
    // encode a "jmp reset_bus side 0" instruction for the state machine
    return pio_encode_jmp (offset + asm_offset_set_bits) | pio_encode_sideset (0, 0);
}
%}
