// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// asm //
// --- //

#define asm_wrap_target 2
#define asm_wrap 5
#define asm_pio_version 0

#define asm_T1 2
#define asm_T2 5
#define asm_T3 3

#define asm_offset_set_bits 0u

static const uint16_t asm_program_instructions[] = {
    0xef3c, //  0: set    x, 28           side 0 [15]
    0x0f41, //  1: jmp    x--, 1          side 0 [15]
            //     .wrap_target
    0x6221, //  2: out    x, 1            side 0 [2] 
    0x1125, //  3: jmp    !x, 5           side 1 [1] 
    0x1402, //  4: jmp    2               side 1 [4] 
    0xa442, //  5: nop                    side 0 [4] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program asm_program = {
    .instructions = asm_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = asm_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config asm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + asm_wrap_target, offset + asm_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void asm_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = asm_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 24);// 24 Bit nach links ausshiften
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = asm_T1 + asm_T2 + asm_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline uint asm_set_bits (uint offset) {
    // encode a "jmp reset_bus side 0" instruction for the state machine
    return pio_encode_jmp (offset + asm_offset_set_bits) | pio_encode_sideset (0, 0);
}

#endif

